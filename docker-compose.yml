version: '3'
services:
  zookeeper:
    image: debezium/zookeeper:1.5
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
  kafka:
    image: debezium/kafka:1.5
    ports:
      - 9092:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
  postgres:
    image: debezium/postgres:11
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ${PWD}/postgres:/docker-entrypoint-initdb.d
      - ${PWD}/postgres:/postgres
  connect:
    image: debezium/connect:1.5
    ports:
      - 8083:8083
    links:
      - kafka
      - postgres
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=test-consumer-group
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
  flink-base-img:
    build:
      context: ./client-image
      dockerfile: Dockerfile.base
    image: rtdw/flink-base
    command: echo image build success!
    
  sql-client:
    build: ./client-image
    image: rtdw/flink-sql-client
    depends_on:
      - kafka
      - jobmanager
      - elasticsearch
    environment:
      FLINK_JOBMANAGER_HOST: jobmanager
      ZOOKEEPER_CONNECT: zookeeper
      KAFKA_BOOTSTRAP: kafka
      ES_HOST: elasticsearch
      # HOODIE_ENV_fs_DOT_oss_DOT_endpoint: "minio:9000"
      # HOODIE_ENV_fs_DOT_oss_DOT_accessKeyId: abc
      # HOODIE_ENV_fs_DOT_oss_DOT_accessKeySecret: xyzxyzxyz
      # HOODIE_ENV_fs_DOT_oss_DOT_impl: org.apache.hadoop.fs.aliyun.oss.AliyunOSSFileSystem
    volumes:
      - ${PWD}/data:/data
      - ${PWD}/ckp:/ckp
  jobmanager:
    image: rtdw/flink-base
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 50
        parallelism.default: 1
    volumes:
      - ${PWD}/data:/data
      - ${PWD}/ckp:/ckp
      # - ${PWD}/client-image/lib:/opt/flink/lib

  taskmanager:
    image: rtdw/flink-base
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 50
        parallelism.default: 1
    volumes:
      - ${PWD}/data:/data
      - ${PWD}/ckp:/ckp
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.11
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
  kibana:
    image: docker.elastic.co/kibana/kibana:7.11.2
    ports:
      - "5601:5601"
  # minio:
  #   image: minio/minio
  #   env_file:
  #     - .env
  #   ports:
  #     - "9000:9000"
  #   command: server /data


# 1. `zookeeper`:
#    - Image: `debezium/zookeeper:1.5`
#    - Purpose: Runs Apache ZooKeeper, which is used for distributed coordination in the Kafka ecosystem.
#    - Ports: Exposes ports 2181, 2888, and 3888.

# 2. `kafka`:
#    - Image: `debezium/kafka:1.5`
#    - Purpose: Runs Apache Kafka, a distributed streaming platform.
#    - Ports: Exposes port 9092.
#    - Links to `zookeeper` for ZooKeeper coordination.
#    - Configures `ZOOKEEPER_CONNECT` to point to the `zookeeper` service.

# 3. `postgres`:
#    - Image: `debezium/postgres:11`
#    - Purpose: Runs a PostgreSQL database.
#    - Ports: Exposes port 5432.
#    - Configures environment variables for PostgreSQL user and password.
#    - Mounts volumes for initializing the database and storing PostgreSQL data.

# 4. `connect`:
#    - Image: `debezium/connect:1.5`
#    - Purpose: Runs Debezium Connect, a platform for change data capture (CDC) and data integration.
#    - Ports: Exposes port 8083.
#    - Links to `kafka` and `postgres` for communication.
#    - Configures various environment variables for Debezium Connect settings.

# 5. `flink-base-img`:
#    - Build: Builds a Docker image using a Dockerfile (`Dockerfile.base`) from the `./client-image` directory.
#    - Purpose: Creates a base image for Flink jobs.

# 6. `sql-client`:
#    - Build: Builds a Docker image using files from the `./client-image` directory.
#    - Purpose: Likely a Flink SQL client.
#    - Depends on `kafka`, `jobmanager`, and `elasticsearch`.
#    - Configures environment variables for various services.

# 7. `jobmanager`:
#    - Image: `rtdw/flink-base`
#    - Purpose: Runs the Flink JobManager component.
#    - Ports: Exposes port 8081 for Flink web interface.
#    - Configures Flink properties using environment variables.
#    - Mounts volumes for data and checkpoints.

# 8. `taskmanager`:
#    - Image: `rtdw/flink-base`
#    - Purpose: Runs the Flink TaskManager component.
#    - Depends on `jobmanager`.
#    - Configures Flink properties using environment variables.
#    - Mounts volumes for data and checkpoints.

# 9. `elasticsearch`:
#    - Image: `docker.elastic.co/elasticsearch/elasticsearch:7.17.11`
#    - Purpose: Runs Elasticsearch, a distributed search and analytics engine.
#    - Exposes ports 9200 and 9300.
#    - Configures various Elasticsearch environment variables.

# 10. `kibana`:
#     - Image: `docker.elastic.co/kibana/kibana:7.11.2`
#     - Purpose: Runs Kibana, a web interface for Elasticsearch.
#     - Exposes port 5601.

# 11. `minio` (commented out):
#     - Image: `minio/minio`
#     - Purpose: Likely used for object storage, but it's currently commented out.

# This Docker Compose configuration defines a complex application stack with various interconnected services, including Kafka, Flink, PostgreSQL, Elasticsearch, Kibana, and potentially Minio for object storage. It seems to be a part of a data processing pipeline, possibly for real-time data streaming and analytics.